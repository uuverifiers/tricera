-- Copyright (c) 2021-2022 Pontus Ernstedt
--                    2023 Zafer Esen. All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without
-- modification, are permitted provided that the following conditions are met:
--
-- * Redistributions of source code must retain the above copyright notice, this
--   list of conditions and the following disclaimer.
--
-- * Redistributions in binary form must reproduce the above copyright notice,
--   this list of conditions and the following disclaimer in the documentation
--   and/or other materials provided with the distribution.
--
-- * Neither the name of the authors nor the names of their
--   contributors may be used to endorse or promote products derived from
--   this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
-- AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
-- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-- SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
-- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
-- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- Parser for (subset of) ACSL.
-- Figure references are to ACSL Manual:
-- https://frama-c.com/download/acsl.pdf

-- This grammar merges Predicate and Term into Expr to avoid conflicts.

--- Annotation ---------------------------------------------
AnnotContract.  Annotation ::= "/*@" FunctionContract "*/";
AnnotAssertion. Annotation ::= "/*@" Assertion "*/";
LoopAnnot.      Annotation ::= "/*@" LoopInvariant "*/";

entrypoints Annotation, FunctionContract, Assertion, LoopInvariant;

---- Assertions --------------------------------------------
RegularAssertion. Assertion ::= AssertionKind Expr ;
_.                Assertion ::= Assertion ";"  ;
-- BehaviourAssertion. Assertion ::= for id ... (see Figure 2.9 in the ACSL standard)

---- Contracts (2.6) ---------------------------------------
Contract. FunctionContract ::= [RequiresClause] MaybeTerminatesClause MaybeDecreasesClause [SimpleClause] [NamedBehavior] [CompletenessClause] ;

Assert.            AssertionKind ::= "assert" ;
NonBlockingAssert. AssertionKind ::= ClauseKind ;

NoClauseKind.   MaybeClauseKind ::= ;
SomeClauseKind. MaybeClauseKind ::= ClauseKind ;
ClauseKindCheck. ClauseKind ::= "check" ;
ClauseKindAdmit. ClauseKind ::= "admit" ;

ARequiresClause. RequiresClause ::= MaybeClauseKind "requires" Expr ;
terminator RequiresClause ";" ;

NoTerminatesClause.   MaybeTerminatesClause ::= ;
SomeTerminatesClause. MaybeTerminatesClause ::= TerminatesClause ;
ATerminatesClause. TerminatesClause ::= "terminates" Expr ";" ;

NoDecreasesClause.   MaybeDecreasesClause ::= ;
SomeDecreasesClause. MaybeDecreasesClause ::= DecreasesClause ;
ADecreasesClause. DecreasesClause ::= "decreases" Expr ";" ; -- Term -- TODO: ("for" ident)? 

SimpleClauseAssigns. SimpleClause ::= AssignsClause ;
SimpleClauseEnsures. SimpleClause ::= EnsuresClause ;
-- FIXME: AllocationClause and AbruptClause are referenced but not defined in
--        the BNF of 2.6 (but later on). Skipping for now.
-- SimpleClauseAllocation. SimpleClause ::= AllocationClause ;
-- SimpleClauseAbrupt.     SimpleClause ::= AbruptClause ;
separator SimpleClause "" ;

AnAssignsClause. AssignsClause ::= "assigns" Locations ";" ;

LocationsSome.    Locations ::= [Location] ;
LocationsNothing. Locations ::= "\\nothing" ;

ALocation. Location ::= TSet ;
separator nonempty Location "," ;

AnEnsuresClause. EnsuresClause ::= MaybeClauseKind "ensures" Expr ";" ;

ANamedBehavior. NamedBehavior ::= "behavior" Id ":" BehaviorBody ;
terminator NamedBehavior "" ;

ABehaviorBody. BehaviorBody ::= [AssumesClause] [RequiresClause] [SimpleClause] ;

AnAssumesClause. AssumesClause ::= "assumes" Expr ;
separator AssumesClause ";" ;

CompletenessClauseComplete. CompletenessClause ::= "complete" "behaviors" [Id] ;
CompletenessClauseDisjoint. CompletenessClause ::= "disjoint" "behaviors" [Id] ;
terminator CompletenessClause ";" ;

---- Loops -------------------------------------------------
-- This is a bit simplified
LoopInvSimple. LoopInvariant ::= "loop" "invariant" Expr ";" ;

---- Expressions (Predicates and Terms) (2.2) ---------------------------------

-- Literals
LitTrue.   Lit ::= "\\true" ;
LitFalse.  Lit ::= "\\false" ;
LitInt.    Lit ::= UnboundedInteger ;
LitReal.   Lit ::= Double ;
LitString. Lit ::= String ;
LitChar.   Lit ::= Char ;

-- In increasing order of precedence.
-- Associtivities are given in parentheses.
-- See the ACSL standard for precedence and associativity.

-- naming (right)
ENaming1.    Expr ::= Id ":" Expr ;
ENaming2.    Expr ::= String ":" Expr ;

-- binding (left)
EForAll.     Expr2 ::= "\\forall" [Binder] ";" Expr2 ;
EExists.     Expr2 ::= "\\exists" [Binder] ";" Expr2 ;
EBinding.    Expr2 ::= "\\let" Id "=" Expr2 ";" Expr ;

-- ternary connective (right)
ETernary.    Expr3 ::= Expr3 "?" Expr4 ":" Expr5 ;

-- logical connectives
EEquiv.      Expr4  ::= Expr5 "<==>" Expr4 ; -- (left)
EImplies.    Expr5  ::= Expr5 "==>" Expr6 ;  -- (right)
EOr.         Expr6  ::= Expr7 "||" Expr6 ;   -- (left)
EXOr.        Expr7  ::= Expr8 "^^" Expr7 ;   -- (left)
EAnd.        Expr8  ::= Expr9 "&&" Expr8 ;   -- (left)

-- bitwise operators
EBitEquiv.   Expr9  ::= Expr10 "<-->" Expr9 ;  -- (left)
EBitImplies. Expr10 ::= Expr10 "-->" Expr11 ;  -- (right)
EBitOr.      Expr11 ::= Expr12 "|" Expr11 ;    -- (left)
EBitXOr.     Expr12 ::= Expr13 "^" Expr12 ;    -- (left)
EBitAnd.     Expr13 ::= Expr14 "&" Expr13 ;    -- (left)

-- Comparison (associativity -)
EEq.         Expr14  ::= Expr14 "==" Expr15 ;
ENeq.        Expr14  ::= Expr14 "!=" Expr15 ;
ERelOp.      Expr15  ::= Expr15 RelOp Expr16; -- FIXME: Chained relops allowed.

-- Shift (left)
ELeftShift.  Expr16  ::= Expr17 "<<" Expr16;
ERightShift. Expr16  ::= Expr17 ">>" Expr16;

-- Additive (left)
EPlus.       Expr17  ::= Expr18 "+" Expr17;
EMinus.      Expr17  ::= Expr18 "-" Expr17;

-- Multiplicative (left)
EMult.       Expr18  ::= Expr19 "*" Expr18;
EDiv.        Expr18  ::= Expr19 "/" Expr18;
EMod.        Expr18  ::= Expr19 "%" Expr18;

-- Unary (right)
EUnary.      Expr19 ::= UnaryOp Expr19 ;

-- FIXME: Test that sizeof can also take a term as argument.
ETypeCast.   Expr19 ::= "(" TypeExpr ")" Expr19 ;
ESizeOfTerm. Expr19 ::= "sizeof" "(" Expr19 ")" ;
ESizeOfType. Expr19 ::= "sizeof" "(" CTypeExpr ")" ;

-- Selection (left)
EArrayAccess.          Expr20 ::= Expr20 "[" Expr19 "]" ; -- Term[Term]
EStructFieldAccess.    Expr20 ::= Expr20 "." Id ;        -- Term.Term
EStructPtrFieldAccess. Expr20 ::= Expr20 "->" Id ;

EArrayFunMod. Expr21 ::= "{" Expr21 "\\with" "[" Expr22 "]" "=" Expr23 "}" ;
EFieldFunMod. Expr21 ::= "{" Expr21 "\\with" "." Id "=" Expr22 "}" ;

EApplication. Expr22 ::= Id "(" [Expr2] ")" ;
EOld.         Expr22 ::= "\\old" "(" Expr2 ")" ;
EValid.       Expr22 ::= "\\valid" "(" [Location] ")" ;

ELit.         Expr23 ::= Lit ;
EIdent.       Expr23 ::= Id ;
EResult.      Expr23 ::= "\\result" ;

separator nonempty Expr2 "," ;
coercions Expr 23;

UnaryPlus.            UnaryOp ::= "+" ;
UnaryMinus.           UnaryOp ::= "-" ;
UnaryNegation.        UnaryOp ::= "!" ;
UnaryComplementation. UnaryOp ::= "~" ;
UnaryPtrDeref.        UnaryOp ::= "*" ;
UnaryAddressOf.       UnaryOp ::= "&" ;

RelOpLEQ.             RelOp ::= "<=" ;
RelOpGEQ.             RelOp ::= ">=" ;
RelOpGT.              RelOp ::= ">" ;
RelOpLT.              RelOp ::= "<" ;

-- Binders (2.4) -------------------------------------------
ABinder. Binder ::= TypeName [VarIdent] ;
separator nonempty Binder "," ;

TypeNameLogic. TypeName ::= LogicTypeName ;
TypeNameC.     TypeName ::= CTypeName ;

-- NOTE: Referenced but not used in 2.4
TypeExprLogic. TypeExpr ::= LogicTypeName ;
TypeExprC.     TypeExpr ::= CTypeExpr ;

LogicTypeNameBuiltIn. LogicTypeName ::= BuiltInLogicType ;

BuiltInLogicTypeBoolean. BuiltInLogicType ::= "boolean" ;
BuiltInLogicTypeInteger. BuiltInLogicType ::= "integer" ;
BuiltInLogicTypeReal.    BuiltInLogicType ::= "real" ;

VarIdentId.          VarIdent3 ::= Id ;
VarIdentArray.       VarIdent2  ::= VarIdent3 "[" "]";
VarIdentPtrDeref.    VarIdent ::= "*" VarIdent2 ;

coercions VarIdent 3 ;
separator nonempty VarIdent "," ;

-- Memory Location Sets (2.8) ------------------------------
-- TODO: Missing a lot.
TSetEmpty. TSet ::= "\\empty" ;
TSetTerm. TSet ::= Expr ;

-- C types
ACTypeExpr. CTypeExpr ::= [CSpecQual] CMaybeAbsDec ;
separator nonempty CSpecQual "" ;

NoAbsDec.   CMaybeAbsDec ::= ;
SomeAbsDec. CMaybeAbsDec ::= CAbsDec ;

ACTypeName. CTypeName ::= [CDeclSpec] ;
separator nonempty CDeclSpec "" ;

CSpecQualTypeSpec. CSpecQual ::= CTypeSpec ; 
CSpecQualTypeQual. CSpecQual ::= CTypeQual ; 

CTypeQualConst.    CTypeQual ::= "const"    ;
CTypeQualVolat.    CTypeQual ::= "volatile" ;

CStruct.   CCollection ::= "struct" ;
CUnion.    CCollection ::= "union"  ;
CEnum.     CCollection ::= "enum"   ;

Tvoid.        CTypeSpec ::= "void";
Tchar.        CTypeSpec ::= "char";
Tshort.       CTypeSpec ::= "short";
Tint.         CTypeSpec ::= "int";
Tlong.        CTypeSpec ::= "long";
Tfloat.       CTypeSpec ::= "float";
Tdouble.      CTypeSpec ::= "double";
Tsigned.      CTypeSpec ::= "signed";
Tunsigned.    CTypeSpec ::= "unsigned";
Tcollection.  CTypeSpec ::= CCollection Id;

PointerStart.    CAbsDec ::= CPointer ;
Advanced.        CAbsDec ::= CDirAbsDec ;
PointAdvanced.   CAbsDec ::= CPointer CDirAbsDec ;

ACSinglePointer. CSinglePointer     ::= "*" [CTypeQual] ;
separator CTypeQual "" ;

ACPointer.       CPointer ::= [CSinglePointer] ;
separator nonempty CSinglePointer "" ;

WithinParentes.  CDirAbsDec ::= "(" CAbsDec ")" ;
Array.           CDirAbsDec ::= "[" "]" ;
InitiatedArray.  CDirAbsDec ::= "[" Expr "]" ;
UnInitiated.     CDirAbsDec ::= CDirAbsDec "[" "]" ;
Initiated.       CDirAbsDec ::= CDirAbsDec "[" Expr "]" ;
OldFunction.     CDirAbsDec ::= "(" ")" ;
NewFunction.     CDirAbsDec ::= "(" CParamType ")" ;
OldFuncExpr.     CDirAbsDec ::= CDirAbsDec "(" ")" ;
NewFuncExpr.     CDirAbsDec ::= CDirAbsDec "(" CParamType ")" ;

AllSpec.  CParamType ::= [CParamDecl] ;
separator nonempty CParamDecl "," ;

COnlyType.         CParamDecl ::= [CDeclSpec] ;
CTypeAndParam.     CParamDecl ::= [CDeclSpec] CDeclarator ;
CAbstract.         CParamDecl ::= [CDeclSpec] CAbsDec ;

CType.             CDeclSpec ::= CTypeSpec ;
CSpecProp.         CDeclSpec ::= CTypeQual;

BeginPointer.   CDeclarator ::= CPointer CDirectDeclarator ;
NoPointer.      CDeclarator ::= CDirectDeclarator ;

Name.        CDirectDeclarator ::= Id ;
ParenDecl.   CDirectDeclarator ::= "(" CDeclarator ")" ;
InitArray.   CDirectDeclarator ::= CDirectDeclarator "[" Expr "]" ;
Incomplete.  CDirectDeclarator ::= CDirectDeclarator "[" "]" ;
MathArray.   CDirectDeclarator ::= CDirectDeclarator "[" "_" "]" ;
NewFuncDec.  CDirectDeclarator ::= CDirectDeclarator "(" CParamType ")" ;
OldFuncDec.  CDirectDeclarator ::= CDirectDeclarator "(" ")" ;

---- Tokens ------------------------------------------------ 
position token Id (letter | '_' | '$') (letter | digit | '_' | '$')*;
separator Id "," ;

token UnboundedInteger ('0' | (["123456789"] digit *));
