
contract1.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires 10 >= x && x >= 0;
  ensures \result == \old(x) && 10 >= \old(x) && \old(x) >= 0;
*/
================================================================================

SAFE

contract2.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires g >= 0 && x >= 0;
  ensures \result >= \old(x) && g >= 1 && \old(x) >= 0 && \old(g) >= 0;
*/
================================================================================

SAFE

contract2b.hcc

---------------------
Init:
  main15_3(-10, 5)   
---------------------
          |          
          |          
          V          
 main16_7(-10, 5, 5) 
---------------------
          |          
          |          
          V          
    main_1(-4, 5)    
---------------------
          |          
          |          
          V          
    main_2(-4, 5)    
---------------------
Final:
    main_2(-4, 5)    
---------------------
Failed assertion:
false :- main_2(g:2, y:14), g:2 < 0. (line:18 col:3) (property: user-assertion)

UNSAFE

contract3.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires g == 0 || (g - x >= 1 && g >= 1);
  ensures g >= 0 && \old(g) >= 0 && (g != \old(g) || ((\old(x) >= 2*\old(g) || \old(g) - \old(x) >= 1) && (2*\old(g) - \old(x) >= 1 || 0 >= \old(g)))) && (\old(g) != 0 || ((g != 0 || 0 >= \old(x)) && (g >= \old(x) || 0 >= g))) && (g == \old(g) || g - \old(x) >= 1 || 0 >= \old(g)) && (g >= \old(g) || \old(x) >= g || 0 >= \old(g));
*/
================================================================================

SAFE

takeuchi.hcc

Inferred ACSL annotations
================================================================================
/* contract for tak */
/*@
  requires \true;
  ensures (\result != \old(z) || \old(y) >= \old(z) || \old(x) - \old(y) >= 1) && (\result != \old(y) || \old(y) >= \old(z) || \old(y) >= \old(x)) && (\result == \old(z) || \result == \old(y) || \old(y) - \old(z) >= 1) && (\result == \old(y) || \old(z) >= \old(y) || \old(x) - \old(y) >= 1);
*/
================================================================================

SAFE

assert.hcc

Inferred ACSL annotations
================================================================================
/* contract for mult */
/*@
  requires x == N && N >= 0 && y >= 0;
  ensures N2 == \old(N2) && N == \old(N) && \old(x) == \old(N) && \old(y) >= 0 && \old(N) >= 0 && (\result >= \old(y) || \result >= \old(N));
*/
================================================================================

SAFE

fib.hcc

---------------
Init:
   main12_3    
---------------
       |       
       |       
       V       
 main12_11(6)  
---------------
       |       
       |       
       V       
 main12_3_1(8) 
---------------
Final:
 main12_3_1(8) 
---------------
Failed assertion:
false :- main12_3_1(x:12), x:12 != 0. (line:14 col:3) (property: user-assertion)

UNSAFE

stackptr.hcc

Inferred ACSL annotations
================================================================================
/* contracts for f */
/*@
  requires \true;
  ensures *x - 1 == \old(*x) && \valid(x);
*/
================================================================================

SAFE

struct-name-bug.hcc

Inferred ACSL annotations
================================================================================
/* contract for foo */
/*@
  requires s.f == 21;
  ensures \old(s).f == 21 && 2*21 == \result;
*/
================================================================================

SAFE

stackptr-multi-arg.c
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contracts for mod */
/*@
  requires \exists int v0; \exists S v1; (v0 >= -2147483647 && 2147483646 >= v0 && t1->val == v0) && \valid(t2) && \valid(t1);
  ensures t1->val == 1 + \old(t1->val) && \exists int v0; \exists S v1; \old(t1->val) == v0 && \valid(t2) && t2->val == \old(t2->val) - 1 && \valid(t1);
*/
================================================================================

SAFE

stackptr-nested-calls.c
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contracts for incdec */
/*@
  requires \exists int v0; (v0 >= -2147483648 && 2147483646 >= v0 && p->val == v0) && q->val == 0 && \valid(p) && \valid(q);
  ensures \exists int v0, v1; (p->val == 1 + v1 - 1 && 1 + v1 == 1 + v0 && v0 >= -2147483648 && 2147483646 >= v0 && \old(p->val) == v1) && \old(q->val) == 0 && q->val == 0 && \valid(p) && \valid(q);
*/
/* contracts for decr */
/*@
  requires \exists int v0; (v0 >= -2147483648 && 2147483646 >= v0 && q->val == 1 + v0 && p->val == 1 + v0) && \valid(q) && \valid(p);
  ensures q->val == \old(q->val) - 1 && \exists int v0; (v0 >= -2147483648 && 2147483646 >= v0 && \old(q->val) == 1 + v0 && p->val == 1 + v0) && *p == \old(*p) && \valid(q) && \valid(p);
*/
================================================================================

SAFE

stackptr-recursion.c

---------------------------------
Init:
    main25_5(emptyHeap, 0, 0)    
---------------------------------
                |                
                |                
                V                
 main31_0(emptyHeap, 0, 0, 2, 0) 
---------------------------------
                |                
                |                
                V                
      main(emptyHeap, 0, 1)      
---------------------------------
Final:
      main(emptyHeap, 0, 1)      
---------------------------------
Failed assertion:
false :- main(@h, globalincr_0t:38, s:24), s:24 != 5. (line:26 col:5) (property: user-assertion)

UNSAFE

stackptr-retvalue.c
UNKNOWN (Unsupported C fragment. 8:12 Stack pointers in combination with heap pointers)

stackptr-struct.c
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contracts for incr */
/*@
  requires \exists int v0; (v0 >= -2147483647 && 2147483646 >= v0 && t->val == v0) && \valid(t);
  ensures t->val == 1 + \old(t->val) && \exists int v0; (v0 >= -2147483647 && 2147483646 >= v0 && \old(t->val) == v0) && \valid(t);
*/
================================================================================

SAFE

stackptr-custom-entry.c
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contracts for incr */
/*@
  requires \exists int v0; (v0 >= -2147483648 && 2147483646 >= v0 && t->val == v0) && \valid(t);
  ensures t->val == 1 + \old(t->val) && \exists int v0; (v0 >= -2147483648 && 2147483646 >= v0 && \old(t->val) == v0) && \valid(t);
*/
================================================================================

SAFE
