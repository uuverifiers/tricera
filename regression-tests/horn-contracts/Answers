
contract1.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires 10 >= x && x >= 0;
  ensures 10 >= \old(x) && \old(x) >= 0 && \result >= 0 && (\old(x) != 10 || \result != 0);
*/
================================================================================

SAFE

contract2.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires x >= 0 && g >= 0;
  ensures \old(g) >= 0 && \old(x) >= 0 && g >= 1 && \result >= 0 && (\result >= \old(x) || \result >= 10);
*/
================================================================================

SAFE

contract2b.hcc

---------------------
Init:
  main15_3(-10, 5)   
---------------------
          |          
          |          
          V          
 main16_7(-10, 5, 5) 
---------------------
          |          
          |          
          V          
    main_1(-4, 5)    
---------------------
          |          
          |          
          V          
    main_2(-4, 5)    
---------------------
Final:
    main_2(-4, 5)    
---------------------
Failed assertion:
false :- main_2(g:2, y:14), g:2 < 0. (line:18 col:3) (property: user-assertion)

UNSAFE

contract3.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires g >= 0;
  ensures \old(g) >= 0 && g >= 0 && (g - \old(g) >= \old(x) || -1 >= \old(x));
*/
================================================================================

SAFE

takeuchi.hcc

Inferred ACSL annotations
================================================================================
/* contract for tak */
/*@
  requires \true;
  ensures (\old(y) == \result || \old(z) == \result || \old(y) - \old(z) >= 1) && (\old(y) == \result || \old(x) - \old(y) >= 1 || \old(z) >= \old(y)) && (\old(y) >= \old(z) || ((\old(y) != \result || \result >= \old(x)) && (\old(z) != \result || \old(x) - \old(y) >= 1)));
*/
================================================================================

SAFE

assert.hcc

Inferred ACSL annotations
================================================================================
/* contract for mult */
/*@
  requires N == x && y >= 0 && x >= 0;
  ensures \old(x) == N && \old(N) == N && \old(N2) == N2 && \old(y) >= 0 && \result >= 0 && N >= 0 && (\result >= \old(y) || 0 >= N);
*/
================================================================================

SAFE

fib.hcc

---------------
Init:
   main12_3    
---------------
       |       
       |       
       V       
 main12_11(6)  
---------------
       |       
       |       
       V       
 main12_3_1(8) 
---------------
Final:
 main12_3_1(8) 
---------------
Failed assertion:
false :- main12_3_1(x:12), x:12 != 0. (line:14 col:3) (property: user-assertion)

UNSAFE

stackptr.hcc

Inferred ACSL annotations
================================================================================
/* contract for f */
/*@
  requires \true;
  ensures \valid(x) && \old(*x) - *x == -1;
*/
================================================================================

SAFE

struct-name-bug.hcc

Inferred ACSL annotations
================================================================================
/* contract for foo */
/*@
  requires s.f == 21;
  ensures \result == 42 && \old(s).f == 21;
*/
================================================================================

SAFE

stackptr-multi-arg.hcc
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contract for mod */
/*@
  requires \valid(t2) && \valid(t1) && 2147483647 >= t2->val && t2->val >= -2147483647 && 2147483646 >= t1->val && t1->val >= -2147483648;
  ensures \valid(t2) && \valid(t1) && (\old(t2->val) >= 2147483648 || -2147483648 >= \old(t2->val) || \old(t1->val) >= 2147483647 || -2147483649 >= \old(t1->val) || (\old(t2->val) - t2->val == 1 && \old(t1->val) - t1->val == -1));
*/
================================================================================

SAFE

stackptr-nested-calls.hcc
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contract for incdec */
/*@
  requires \valid(p) && 2147483646 >= p->val && p->val >= -2147483648;
  ensures \valid(p) && (\old(p->val) >= 2147483647 || -2147483649 >= \old(p->val) || (p->val == \old(p->val) && 2147483646 >= \old(p->val) && \old(p->val) >= -2147483648));
*/
/* contract for decr */
/*@
  requires \valid(q) && 2147483647 >= q->val && q->val >= -2147483647;
  ensures \valid(q) && (\old(q->val) - q->val == 1 || \old(q->val) >= 2147483648 || -2147483648 >= \old(q->val));
*/
================================================================================

SAFE

stackptr-recursion.hcc

---------------------------------
Init:
    main25_5(emptyHeap, 0, 0)    
---------------------------------
                |                
                |                
                V                
 main31_0(emptyHeap, 0, 0, 2, 0) 
---------------------------------
                |                
                |                
                V                
      main(emptyHeap, 0, 1)      
---------------------------------
Final:
      main(emptyHeap, 0, 1)      
---------------------------------
Failed assertion:
false :- main(@h, globalincr_0t:38, s:24), s:24 != 5. (line:26 col:5) (property: user-assertion)

UNSAFE

stackptr-retvalue.hcc
UNKNOWN (Unsupported C fragment. 8:12 Stack pointers in combination with heap pointers)

stackptr-struct.hcc
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contract for incr */
/*@
  requires \valid(t) && 2147483646 >= t->val && t->val >= -2147483647;
  ensures \valid(t) && (\old(t->val) - t->val == -1 || \old(t->val) >= 2147483647 || -2147483648 >= \old(t->val));
*/
================================================================================

SAFE

stackptr-custom-entry.hcc
Warning: no definition of function "non_det_int" available

Inferred ACSL annotations
================================================================================
/* contract for incr */
/*@
  requires \valid(t) && 2147483646 >= t->val && t->val >= -2147483648;
  ensures \valid(t) && (\old(t->val) - t->val == -1 || \old(t->val) >= 2147483647 || -2147483649 >= \old(t->val));
*/
================================================================================

SAFE
