-- Grammar for concurrent + timed C, derived from the ANSI C
-- grammar by Ulf Persson:
--
-- Ansi C, following Kernighan & Ritchie (Second Edition).
-- (c) Ulf Persson 2003
-- part of BSc thesis at Chalmers University of Technology
--
-- NOTICE: the C program may need to be preprocessed by cpp. Also types defined
-- by typedefs have to be eliminated (these are known problems with the 
-- BNF grammar of Ansi C).

entrypoints Program, Stm, Exp ;

Progr.  Program ::= [External_declaration] ;

Afunc.  External_declaration ::= Function_def ;
Athread.External_declaration ::= Thread_def ;
Global. External_declaration ::= Dec ;
Chan.   External_declaration ::= Chan_def ;
Ignored.External_declaration ::= IgnoredDecl;

-- following can be left in source after preprocessing, simply ignore them.
ExternKeyword. IgnoredDecl ::= "__extension__" ;
StraySemi.     IgnoredDecl ::= ";" ;

separator nonempty External_declaration "";

AnnotatedFunc.  Function_def ::= [Annotation] [Declaration_specifier] Declarator Compound_stm ;
-- OldFunc.     Function_def ::= [Declaration_specifier] Declarator [Dec] Compound_stm ;
-- OldFuncInt.  Function_def ::= Declarator [Dec] Compound_stm ;
NewFuncInt.  Function_def ::= [Annotation] Declarator Compound_stm ;
NewFunc.     Function_def ::= [Declaration_specifier] Declarator Compound_stm ;

Annot1. Annotation ::= AnnotationString;

separator nonempty Annotation "";

SingleThread. Thread_def ::= "thread" CIdent Compound_stm ;
ParaThread.   Thread_def ::= "thread" "[" CIdent "]" CIdent Compound_stm ;

NoDeclarator.    Dec ::= [Declaration_specifier] [Extra_specifier] ";";
Declarators.     Dec ::= [Declaration_specifier] [Init_declarator] [Extra_specifier] ";" ;
PredDeclarator.  Dec ::= "/*$" [Pred_hint] "$*/";
InterpPredDeclarator. Dec ::= "/*$" Pred_interp "$*/";


separator nonempty Dec "";

separator Pred_hint ",";
PredicateHint. Pred_hint ::= CIdent "(" Parameter_type ")";
separator nonempty Type_specifier ",";

-- An interpreted predicate
PredicateExp. Pred_interp ::= CIdent "(" Parameter_type ")" "{" Exp "}" ;


AChan. Chan_def ::= "chan" [CIdent] ";" ;

Type.     Declaration_specifier ::= Type_specifier ;
Storage.  Declaration_specifier ::= Storage_class_specifier ;
SpecProp. Declaration_specifier ::= Type_qualifier;
SpecFunc. Declaration_specifier ::= Function_specifier ;

-- todo: following is probably non-standard, just quickly added so that whe can parse
-- preprocessed prgorams containing gcc attributes
AttrSpec.  Extra_specifier       ::= "__attribute__" "(" "(" [Attribute] ")" ")";
AsmSpec.   Extra_specifier       ::= "__asm__" "(" String ")" ;
Attr.      Attribute             ::= CIdent ; 
AttrParam. Attribute             ::= CIdent "(" Exp ")" ;

separator nonempty Declaration_specifier "";
separator Extra_specifier "";
separator nonempty Attribute ",";

OnlyDecl.     Init_declarator ::= Declarator ;
InitDecl.     Init_declarator ::= Declarator "=" Initializer;
HintDecl.     Init_declarator ::= [Annotation] Declarator;
HintInitDecl. Init_declarator ::= [Annotation] Declarator "=" Initializer;

separator nonempty Init_declarator ",";

-- Comment_abs_hint. Abs_hint ::= "/*@" [Abs_hint_clause] "@*/";

-- separator nonempty Abs_hint "";

-- Predicate_hint. Abs_hint_clause ::= CIdent Maybe_cost Maybe_Exp_Args;

-- separator Abs_hint_clause "";

-- SomeCost.    Maybe_cost ::= "[" UnboundedInteger "]";
-- NoCost.      Maybe_cost ::= ;

-- SomeExpArgs.    Maybe_Exp_Args ::= "{" Exp "}";
-- NoExpArgs.      Maybe_Exp_Args ::= ;


Tvoid.        Type_specifier ::= "void";
Tbool.        Type_specifier ::= "_Bool";
-- Tcomplex.     Type_specifier ::= "_Complex";
Tchar.        Type_specifier ::= "char";
Tshort.       Type_specifier ::= "short";
Tint.         Type_specifier ::= "int";
Tlong.        Type_specifier ::= "long";
Tfloat.       Type_specifier ::= "float";
Tdouble.      Type_specifier ::= "double";
Tsigned.      Type_specifier ::= "signed";
Tunsigned.    Type_specifier ::= "unsigned";
Tstruct.      Type_specifier ::= Struct_or_union_spec;
Tenum.        Type_specifier ::= Enum_specifier;
-- Tname.        Type_specifier ::= "Typedef_name";
Tclock.       Type_specifier ::= "clock";
Tduration.    Type_specifier ::= "duration";


-- MyType.         Storage_class_specifier ::= "typedef"; -- handled by the preprocessor
GlobalPrograms. Storage_class_specifier ::= "extern" ;
LocalProgram.   Storage_class_specifier ::= "static" ;
LocalBlock.     Storage_class_specifier ::= "auto" ;
LocalReg.       Storage_class_specifier ::= "register" ;

InlineFunSpec1.  Function_specifier ::= "inline" ;
InlineFunSpec2.  Function_specifier ::= "__inline" ;
NoRetFunSpec.   Function_specifier ::= "_Noreturn" ;

Const.      Type_qualifier ::= "const" ;
NoOptim.    Type_qualifier ::= "volatile";
Restrict1.  Type_qualifier ::= "__restrict__";
Restrict2.  Type_qualifier ::= "__restrict";
Extension.  Type_qualifier ::= "__extension__";

separator nonempty Type_qualifier "";

Tag.      Struct_or_union_spec ::= Struct_or_union CIdent "{" [Struct_dec] "}" ;
Unique.   Struct_or_union_spec ::= Struct_or_union "{" [Struct_dec] "}";
TagType.  Struct_or_union_spec ::= Struct_or_union CIdent ;

Struct.   Struct_or_union ::= "struct";
Union.    Struct_or_union ::= "union";

Structen. Struct_dec ::= [Spec_qual] [Struct_declarator] ";" ;

separator Struct_dec "";

TypeSpec.  Spec_qual ::= Type_specifier;
QualSpec.  Spec_qual ::= Type_qualifier;

separator nonempty Spec_qual "";

Decl.      Struct_declarator ::= Declarator;
Field.     Struct_declarator ::= ":" Constant_expression;
DecField.  Struct_declarator ::= Declarator ":" Constant_expression ;

separator nonempty Struct_declarator ",";


EnumDec.   Enum_specifier ::= "enum" "{" [Enumerator] "}" ;
EnumName.  Enum_specifier ::= "enum" CIdent "{" [Enumerator] "}" ;
EnumVar.   Enum_specifier ::= "enum" CIdent ;

Plain.     Enumerator ::= CIdent ;
EnumInit.  Enumerator ::= CIdent "=" Constant_expression ;

separator nonempty Enumerator ",";


BeginPointer.   Declarator ::= Pointer Direct_declarator ;
NoPointer.      Declarator ::= Direct_declarator ;

Name.        Direct_declarator ::= CIdent ;
ParenDecl.   Direct_declarator ::= "(" Declarator ")" ;
InitArray.   Direct_declarator ::= Direct_declarator "[" Constant_expression "]" ;
Incomplete.  Direct_declarator ::= Direct_declarator "[" "]" ;
MathArray.   Direct_declarator ::= Direct_declarator "[" "_" "]" ;
NewFuncDec.  Direct_declarator ::= Direct_declarator "(" Parameter_type ")" ;
-- OldFuncDef.  Direct_declarator ::= Direct_declarator "(" [CIdent] ")" ;
OldFuncDec.  Direct_declarator ::= Direct_declarator "(" ")" ;

Point.          Pointer ::= "*" ;
PointQual.      Pointer ::= "*" [Type_qualifier] ;
PointPoint.     Pointer ::= "*" Pointer ;
PointQualPoint. Pointer ::= "*" [Type_qualifier] Pointer ;


AllSpec.  Parameter_type ::= [Parameter_declaration] ;
-- The following leads to a shift/reduce error since list Parameter_declaration is separated by ,
-- More.     Parameter_type ::= [Parameter_declaration] "," "..." ;

More.          Parameter_declaration ::= "..." ;
OnlyType.      Parameter_declaration ::= [Declaration_specifier] ;
TypeAndParam.  Parameter_declaration ::= [Declaration_specifier] Declarator ;
TypeHintAndParam.  Parameter_declaration ::= [Declaration_specifier] [Annotation] Declarator ;
Abstract.      Parameter_declaration ::= [Declaration_specifier] Abstract_declarator ;

separator nonempty Parameter_declaration ",";

separator nonempty CIdent ",";


InitExpr.    Initializer ::= Exp2 ;
InitListOne. Initializer ::= "{" Initializers "}" ; 
InitListTwo. Initializer ::= "{" Initializers "," "}" ;

AnInit.      Initializers ::= Initializer ;
MoreInit.    Initializers ::= Initializers "," Initializer ;
-- DesInit.     Initializers ::= Designation Initializer ;
-- DesMoreInit. Initializers ::= Initializers "," Designation Initializer ;

-- Desig.        Designation ::= [Designator] "=" ;

-- ArrayDesignator.  Designator ::= "[" Constant_expression "]"
-- StructDesignator. Designator ::= "." CIdent ;

PlainType.    Type_name ::= [Spec_qual] ;
ExtendedType. Type_name ::= [Spec_qual] Abstract_declarator ;

PointerStart.    Abstract_declarator ::= Pointer ;
Advanced.        Abstract_declarator ::= Dir_abs_dec ;
PointAdvanced.   Abstract_declarator ::= Pointer Dir_abs_dec ;


WithinParentes.  Dir_abs_dec ::= "(" Abstract_declarator ")" ;
Array.           Dir_abs_dec ::= "[" "]" ;
InitiatedArray.  Dir_abs_dec ::= "[" Constant_expression "]" ;
UnInitiated.     Dir_abs_dec ::= Dir_abs_dec "[" "]" ;
Initiated.       Dir_abs_dec ::= Dir_abs_dec "[" Constant_expression "]" ;
OldFunction.     Dir_abs_dec ::= "(" ")" ;
NewFunction.     Dir_abs_dec ::= "(" Parameter_type ")" ;
OldFuncExpr.     Dir_abs_dec ::= Dir_abs_dec "(" ")" ;
NewFuncExpr.     Dir_abs_dec ::= Dir_abs_dec "(" Parameter_type ")" ;



LabelS.         Stm ::= Labeled_stm ;
CompS.          Stm ::= Compound_stm ;
ExprS.          Stm ::= Expression_stm ;
SelS.           Stm ::= Selection_stm ;
IterS.          Stm ::= Iter_stm ;
JumpS.          Stm ::= Jump_stm ;
DecS.           Stm ::= Dec ; -- beyond ANSI-C
AtomicS.        Stm ::= Atomic_stm ;
AnnotationS.    Stm ::= Annotation ;
AnnotatedIterS. Stm ::= Annotation Iter_stm ;

SlabelOne.   Labeled_stm ::= CIdent ":" Stm ;
SlabelTwo.   Labeled_stm ::= "case" Constant_expression ":" Stm ;
SlabelThree. Labeled_stm ::= "default" ":" Stm;

ScompOne.   Compound_stm ::= "{" "}" ;
ScompTwo.   Compound_stm ::= "{" [Stm] "}" ;
-- ScompThree. Compound_stm ::= "{" [Dec] "}" ;
-- ScompFour.  Compound_stm ::= "{" [Dec] [Stm] "}" ;

SexprOne.   Expression_stm ::= ";" ;
SexprTwo.   Expression_stm ::= Exp ";" ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Stm "else" Stm ;
SselThree.  Selection_stm ::= "switch" "(" Exp ")" Stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Stm;
SiterTwo.   Iter_stm ::= "do" Stm "while" "(" Exp ")" ";" ;
SiterThree. Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Stm ;
SiterFour.  Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Stm;

SjumpOne.   Jump_stm ::= "goto" CIdent ";" ;
SjumpTwo.   Jump_stm ::= "continue" ";" ;
SjumpThree. Jump_stm ::= "break" ";" ;
SjumpFour.  Jump_stm ::= "return" ";" ;
SjumpFive.  Jump_stm ::= "return" Exp ";" ;
SjumpAbort. Jump_stm ::= "abort" "(" ")" ";" ;
SjumpExit.  Jump_stm ::= "exit" "(" Exp ")" ";" ;

SatomicOne. Atomic_stm ::= "atomic" Stm;
SatomicTwo. Atomic_stm ::= "within" "(" Exp ")" Stm;


separator nonempty Stm "";

token CIdent (letter | '_' | '$' | '\\') (letter | digit | '_' | '$')*;

token AnnotationString   {"■■"} (char - ["■"])* {"■■"};

token UnboundedInteger ["123456789"] digit *;

token Unsigned ["123456789"] digit * ('u'|'U');

token Long ["123456789"] digit * ('l'|'L');

token UnsignedLong ["123456789"] digit * (('u''l')|('U''L'));

token Hexadecimal '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+;

token HexUnsigned '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('u'|'U');

token HexLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ ('l'|'L');

token HexUnsLong '0' ('x'|'X') (digit | ["abcdef"] | ["ABCDEF"])+ (('u''l')|('U''L'));

token Octal '0'["01234567"]*;

token OctalUnsigned '0'["01234567"]*('u'|'U');

token OctalLong '0'["01234567"]* ('l'|'L');

token OctalUnsLong '0'["01234567"]* (('u''l')|('U''L'));

token CDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                                             )|((digit+ ('e'|'E')('-')? digit+));

token CFloat (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? digit+)?
                               ('f'|'F'))|((digit+ ('e'|'E')('-')? digit+)('f'|'F'));

token CLongDouble (((digit+ '.' digit+)|(digit+ '.')|('.' digit+))(('e'|'E')('-')? 
                   digit+)?('l'|'L'))|((digit+ ('e'|'E')('-')? digit+)('l'|'L'));



Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp15 Assignment_op Exp2;
Econdition.  Exp3  ::= Exp4 "?" Exp ":" Exp3;
Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Ebitor.      Exp6  ::= Exp6 "|" Exp7;
Ebitexor.    Exp7  ::= Exp7 "^" Exp8;
Ebitand.     Exp8  ::= Exp8 "&" Exp9;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;
Eleft.       Exp11 ::= Exp11 "<<" Exp12;
Eright.      Exp11 ::= Exp11 ">>" Exp12;
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Emod.        Exp13 ::= Exp13 "%" Exp14;
Etypeconv.   Exp14 ::= "(" Type_name ")" Exp14;
Epreinc.     Exp15 ::= "++" Exp15;
Epredec.     Exp15 ::= "--" Exp15;
Epreop.      Exp15 ::= Unary_operator Exp14;
Ebytesexpr.  Exp15 ::= "sizeof" Exp15;
Ebytestype.  Exp15 ::= "sizeof" "(" Type_name ")";
Earray.      Exp16 ::= Exp16 "[" Exp "]" ;
Efunk.       Exp16 ::= Exp16 "(" ")";
Efunkpar.    Exp16 ::= Exp16 "(" [Exp2] ")";
Eselect.     Exp16 ::= Exp16 "." CIdent;
Epoint.      Exp16 ::= Exp16 "->" CIdent;
Epostinc.    Exp16 ::= Exp16 "++";
Epostdec.    Exp16 ::= Exp16 "--";
Evar.        Exp17 ::= CIdent;
Econst.      Exp17 ::= Constant;
Estring.     Exp17 ::= String;
Enondet.     Exp17 ::= "_";

Einf.          Constant ::= "INFINITY";
Echar.         Constant ::= Char;
Eunsigned.     Constant ::= Unsigned;
Elong.         Constant ::= Long;
Eunsignlong.   Constant ::= UnsignedLong;
Ehexadec.      Constant ::= Hexadecimal;
Ehexaunsign.   Constant ::= HexUnsigned;
Ehexalong.     Constant ::= HexLong;
Ehexaunslong.  Constant ::= HexUnsLong;
Eoctal.        Constant ::= Octal;
Eoctalunsign.  Constant ::= OctalUnsigned;
Eoctallong.    Constant ::= OctalLong;
Eoctalunslong. Constant ::= OctalUnsLong;
Ecfloat.       Constant ::= CFloat;
Ecdouble.      Constant ::= CDouble;
Eclongdouble.  Constant ::= CLongDouble;
Eint.          Constant ::= UnboundedInteger;

Especial. Constant_expression ::= Exp3;

coercions Exp 17;


Address.     Unary_operator ::= "&" ;
Indirection. Unary_operator ::= "*" ;
Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Complement.  Unary_operator ::= "~" ;
Logicalneg.  Unary_operator ::= "!" ;

separator nonempty Exp2 ",";


Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignLeft.   Assignment_op ::= "<<=" ;
AssignRight.  Assignment_op ::= ">>=" ;
AssignAnd.    Assignment_op ::= "&=" ;
AssignXor.    Assignment_op ::= "^=" ;
AssignOr.     Assignment_op ::= "|=" ;

comment "/*" "*/" ;
comment "//";
comment "#";
